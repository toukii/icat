// Code generated by go-bindata.
// sources:
// svg/github.tpl
// svg/gobindata.go
// svg/palette.go
// svg/palette_test.go
// DO NOT EDIT!

package svg

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _svgGithubTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x56\x6d\x6f\x1b\xb9\x11\xfe\x2c\xfd\x0a\xde\xde\xa7\x02\xe4\x2c\x87\xc3\x57\x9f\xa4\x43\x62\x07\x69\x80\x4b\x2f\x68\xd2\x14\xc5\xe1\x50\x28\xab\x8d\x2c\x44\x91\x0c\xed\x5a\x96\x2f\xc8\x7f\x2f\x86\xa4\x62\xc7\xbd\x02\xfd\x60\x2f\x5f\xe6\xe5\x99\x99\x67\x86\x9a\xfd\x7c\xfa\xbc\x15\xc7\xfe\x30\x6c\xf6\xbb\x79\x83\xa0\x1b\xd1\xef\xba\xfd\x6a\xb3\x5b\xcf\x9b\xdb\xf1\xa3\x8a\xcd\xcf\x8b\xe9\xec\x07\xa5\xc4\xcb\x7e\xd7\x1f\x96\xe3\xfe\x70\x21\x9e\xad\xf6\x1f\x7a\xf1\x6a\xbb\xbd\x1d\xc6\x7c\x24\x30\x80\x06\x2d\xc5\xdb\xf7\x2f\xc5\x8b\xd3\xcd\xfe\x30\x8a\x37\xdb\xdb\xb5\x7a\xb5\x13\x90\x0f\xdf\x17\x1f\x17\xc2\x83\xd6\xe2\xf9\xed\x66\xbb\x12\xfa\x2f\x42\x28\xc5\xe6\xaf\x7e\xbd\x7c\xf7\xaf\x37\x2f\xc4\x70\x5c\x8b\x37\xff\x78\xfe\xcb\xab\x4b\xd1\xa8\xb6\xfd\x27\x5d\xb6\xed\xd5\xbb\xab\x6c\x01\x01\xdb\xf6\xc5\xdf\x1a\xd1\x5c\x8f\xe3\xcd\x45\xdb\xde\xdd\xdd\xc1\x1d\xc1\xfe\xb0\x6e\x5f\x1e\x96\x37\xd7\x9b\x6e\x68\xdf\xbe\x7f\xd9\xb2\xe0\xd5\xbb\xab\x76\x38\xae\x11\x61\x35\xae\x9a\xc5\x74\xc6\x96\x1f\xc5\x89\x8d\xd8\xac\xe6\xcd\x2f\xcb\xfb\xfe\xf0\x6f\x6c\xc4\xe9\xf3\x76\x37\xcc\xff\xc4\xb2\xd1\x5a\xb3\xa5\x2a\x72\x71\xda\x6e\x76\x9f\xfe\x4c\x10\x53\x4a\x6d\xbe\x6d\xc4\x69\xde\xe8\x9b\x53\x23\xee\xcb\x77\x3a\x11\x77\x9b\xd5\x78\x3d\x6f\x62\x3e\xbe\xee\x37\xeb\xeb\xf1\xbc\x3b\x6e\xfa\xbb\xe7\x7b\x56\x11\x5a\x38\x34\xfc\xc7\x55\x58\x7e\xd8\xf6\xea\xc3\xb2\xfb\xb4\x3e\xec\x6f\x77\xab\x79\xb3\xeb\xef\xc4\x77\x32\xa7\xcf\xdb\x8b\xe1\x66\xd9\xf5\xf3\xe6\xe6\xd0\x0f\xfd\xe1\xd8\x37\x8b\xe9\x44\xe4\x72\xcd\x56\xfd\xc7\x61\x91\xf3\x2b\x84\x10\xb3\x61\xbc\xdf\xf6\x62\xbc\xbf\xe9\xe7\xcd\xd8\x9f\xc6\xb6\x1b\x86\x66\x31\xfb\xe1\xb7\xcb\xab\x67\xef\x9e\xfd\x96\x85\x84\x10\xf0\xfa\xfe\xef\x7d\x37\x8a\x2f\xe7\x03\x21\x86\xf1\xb0\xff\xd4\x5f\x88\x0f\xdb\xdb\xfe\xa7\x87\xe3\x8f\x9b\xed\xf6\x42\x1c\xfa\xd5\xb7\xb3\xaf\x4f\x8c\x5c\x5c\xef\x8f\xfd\x41\x7c\x99\x4e\x26\x8f\xad\x2c\xbb\x4f\x3f\xe5\xa3\x62\xa1\x98\x9d\x4c\xbe\x4e\xa7\x93\xc9\x8f\xfb\xdb\xb1\x3f\x5c\x6e\x0e\xdd\xb6\xcf\x8a\x93\xff\xd2\x9b\x14\xb5\x2f\x5f\xe0\xd7\x2c\xfb\xf5\xeb\x83\xf6\x66\xb7\xfb\xbf\xb5\x5f\x65\xd9\xb3\x36\xc3\xfe\xfd\xf7\xc5\xac\xcd\x79\xe2\x9c\x95\x2c\xb6\x0f\x69\x9c\xad\x17\xd3\xc9\xac\x2b\xd6\x99\x3d\x8f\xc1\x36\xa2\x3b\xcd\x1b\xe3\x7c\x23\xba\xfb\xba\x38\x94\x6f\x23\xda\x85\x78\xa2\xf9\x08\xe8\xff\xd2\xd4\x0f\x9a\x37\xcb\xf1\x3a\x67\x6b\xde\xfc\xd8\xa5\x8f\x5e\xeb\x46\xac\xe6\xcd\x6b\x22\x0f\xc6\x3b\xe9\x1d\x24\xbc\x24\xd4\x10\x3d\x49\xe7\x00\x7d\x90\x26\x12\x44\x97\xa4\x4d\x10\x30\x49\xe3\x7c\x5d\x76\xca\x84\x7c\xa3\x95\xb3\x45\x03\xac\x8d\x2a\xea\x6c\x0c\x3d\x60\xc2\xe9\x64\xd2\x29\x63\xc1\x39\x2b\x51\x03\x45\xa7\xac\x07\x8f\x56\x1a\x07\xc6\xa3\xf2\x0e\x9c\x0f\xd2\x5a\x30\xe8\x06\x45\x04\xd1\x44\x69\x11\x34\x5a\x55\x4e\x65\x91\xe9\x14\x6a\x08\x96\x58\xd3\x6a\x54\xc5\x81\x74\x06\xac\xf6\xe7\x5d\x71\x3e\x9d\x4c\x86\x0c\x46\x56\x64\xf9\xb6\x5c\xda\xae\xe0\x90\x19\x95\x2b\x38\x8c\xac\xa8\x1e\x7b\x8c\x1d\x46\x48\x0c\x9c\x3f\x54\x41\xc9\x0a\xf1\x3b\xe0\x1c\x66\x00\x8d\x46\x1a\x48\x1c\xbc\x05\x74\xd2\x81\xe3\x13\x04\x4a\x28\x03\x78\x9f\x8e\x8a\x02\x38\x83\x9d\x56\x98\xc0\x69\x2b\x3d\x83\xe0\xb0\x03\x59\x89\x09\xbc\x77\xca\x1a\xf0\xd1\x77\x2a\x02\xa1\x55\x1a\x42\x4a\x0a\x1d\x24\x1b\x14\x42\xc2\xa8\x8c\x81\xa4\x8d\x22\x20\x17\x72\x86\x3d\xe3\x54\x08\x96\x92\x42\x0b\xa4\x93\x22\x70\x18\x58\x52\x7b\x52\x1e\x0c\xb9\x4e\x05\x08\xce\x2a\x03\x01\x23\x8b\x05\x1d\x95\xcb\x9a\x26\x97\x5c\x71\x5d\x89\xad\xa1\xf3\x8a\x20\xb8\xa0\xd0\x80\x0e\x2a\x82\x27\x52\x18\x20\x58\xcf\x9a\xde\xa4\xec\xd7\x81\x0f\x9e\x6d\x24\xcf\xd5\xb1\x64\x58\x21\x64\x10\xc6\x47\xb6\x4b\xd1\x76\x8a\x20\x52\x50\x01\x5c\xb2\xca\x43\x0c\x8e\xeb\x15\x74\x50\x09\x10\x0d\x13\x89\x28\x76\xca\x80\xa1\xc8\x86\x3c\x61\x89\x8e\x03\x20\x4b\x75\x43\x0e\x90\x88\x3d\x6b\x26\x55\x88\x28\x23\xe8\x60\x95\x75\x10\xa3\xe5\x92\x1a\x83\xca\x13\x10\x72\xb4\xc4\x49\x49\xa0\x8d\x53\x35\xcf\x09\x62\x8c\xd2\x00\xa5\xa8\xbc\x01\x97\xb0\xd3\x60\x43\x52\x1a\xd0\x4b\x04\x93\x97\xc4\x44\xcf\x32\xf9\x92\x1d\x22\xa0\x29\x42\x04\x9e\x82\xd2\xa0\xa3\x0c\x99\xd7\x1a\x8c\xed\x08\x12\x7a\x59\x54\x23\x20\xb3\x06\xd0\x25\xc9\xe9\x40\x69\xc0\x61\xec\x98\x70\xec\x84\x5c\x94\x25\x48\x59\xd4\x30\x82\x31\x9e\x29\x12\xa8\x50\xc9\x25\x2b\x73\x01\x24\x3a\xf0\x26\xca\x08\x0e\x89\x03\x44\x8d\xb2\x64\x97\xe9\x19\xb4\x53\x0e\x4c\xf0\x92\x22\x90\x4f\x2a\x40\x42\x2b\x5d\x84\x94\x6c\xd9\x74\x46\x83\xf5\x56\x6a\x69\x35\x18\xcd\x91\x79\x8a\xd2\x25\x30\x64\x65\x16\xc9\x01\x12\x58\x2a\xf5\xe0\x9e\xe0\xcc\x39\xf0\x3e\x48\xf2\x40\x84\xaa\x70\x73\x60\xa8\x9e\x4b\x1e\xb8\x77\x0c\x58\x63\x0a\x80\x6d\x66\x81\xd4\x79\x34\x70\xc3\x18\xbe\x76\xd6\xc8\x04\x81\xbb\x87\xc0\x6a\x57\xd2\x2a\x4b\xea\xb3\x5b\x0f\x68\x83\xc4\x00\xd6\xf8\x5a\x40\x8e\xc5\xd1\x79\x53\xaa\xa9\x65\x25\x16\x30\x3e\x0b\x4e\x57\x86\xc8\x42\x8a\x4a\x9e\x9a\xd7\x9a\x13\x4c\x10\xac\x3b\x07\x95\x49\x96\x69\x9b\xe9\x28\x0b\x1d\x23\xb8\x44\x9c\x51\x8a\xb1\xd2\x56\x9e\x69\x9b\xe9\x2d\x2b\xbd\x91\x21\xb3\xfd\x18\xb0\xb6\x82\x2c\xad\x50\x3b\x46\xd6\x8e\x21\x40\x94\x1e\x52\x72\xb5\xaf\x64\xee\xab\xec\x39\x77\xa0\xac\x1d\xe8\x00\x75\x94\x16\x42\xf2\xb5\x51\x65\x6d\x54\x5f\xe6\xce\xb9\x9f\x5d\xe4\xaa\x39\x77\xee\x7c\x99\x23\xe7\x92\x19\x9f\x64\x09\x0f\x13\x24\xce\x2f\x01\xd9\x6f\xbb\x32\x49\x8e\xe4\x21\xea\x0c\xc0\x83\x35\x3c\x44\x52\xc8\xf9\x74\x4e\x59\x20\xa4\x3c\xe2\x12\x65\xbf\xd8\x95\xc9\xa8\xea\x9c\x2c\x93\x51\xd5\x39\x59\x26\x63\x9d\xcc\x65\x40\x92\xaa\x03\xb2\x4c\x46\x55\xe7\x64\x11\xa9\x03\x3e\x97\x9a\xc7\x77\x36\x64\xeb\xeb\xa0\xca\xf0\x3e\xef\xca\xf0\x1e\x54\x79\x47\xca\xe8\x2e\x83\xbd\x5e\x75\x15\x53\x7d\x51\x2a\xa6\xfa\xa2\xa8\xa7\x0e\x2f\x29\x1a\x88\x21\xc9\x84\x80\xc1\x48\xf2\x1a\xa2\x91\xc1\x83\x49\x41\x7e\xf7\xe8\xfd\xd1\xb4\xfc\x28\xe7\xa7\x3a\xbf\x92\xdd\x76\x39\x0c\xf3\xa6\xfc\x00\x29\xaf\xa4\x96\xfa\xe8\xd0\x5c\x3b\x34\xef\xf5\x5f\xf5\x1f\xe2\x35\xbf\x85\x4e\x23\x38\xef\x2f\x91\x39\x13\xe2\x79\x2f\xf3\x34\xb4\x92\x12\x82\x37\xe6\xbc\x35\xce\xbf\x3d\x4b\x3e\x1c\xd5\xe5\x74\x32\x79\xfb\x4d\xfd\x89\x39\x56\x3c\xdb\x7a\x74\x76\x5e\x33\xfe\xf2\xe3\xa2\x5d\xf3\xbf\xe1\xb8\x5e\x4c\xff\x13\x00\x00\xff\xff\xc0\x9c\xf8\xa7\x96\x0b\x00\x00")

func svgGithubTplBytes() ([]byte, error) {
	return bindataRead(
		_svgGithubTpl,
		"svg/github.tpl",
	)
}

func svgGithubTpl() (*asset, error) {
	bytes, err := svgGithubTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "svg/github.tpl", size: 2966, mode: os.FileMode(420), modTime: time.Unix(1516871419, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _svgGobindataGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x56\xcb\xae\xdb\xc8\x11\x5d\x8b\x5f\xd1\x73\x81\x09\x24\xc0\x91\xf8\x7e\x18\xf0\x66\x6c\x27\xf0\x22\x1e\x20\xf1\x2e\x15\x18\xdd\x64\xb7\x86\x88\x24\x2a\x24\xe5\xd4\xbd\x03\xff\x7b\x70\xba\x4a\xb6\x6f\x26\x33\xb3\xc9\x82\x12\xd9\xec\xae\xc7\xa9\x53\xa7\x78\x38\x98\xd7\xd3\xe0\xcd\xd1\x5f\xfc\x6c\x57\x3f\x18\xf7\x68\x8e\xd3\x1f\xdd\x78\x19\xec\x6a\xf7\xc9\xe1\x60\x96\xe9\x36\xf7\x7e\x79\x19\xef\x3f\x1d\x0f\xc7\x71\xfd\xe9\xe6\xf6\xeb\xf5\xf4\x65\x65\xba\xef\x3f\x4e\xf7\xb5\xab\x3d\xf9\x75\xf5\xbf\x5c\xf9\xb8\xfa\x65\xd5\xe5\x37\x3f\x9a\xf7\x3f\x7e\x30\x6f\xdf\xbc\xfb\xf0\x5d\x92\x5c\x6d\xff\x4f\x7b\xf4\xd8\x9c\x24\xe3\xf9\x3a\xcd\xab\xd9\x26\x9b\x07\xf7\xb8\xfa\xe5\x21\xd9\x3c\xf4\xd3\xf9\x3a\xfb\x65\x39\x1c\x9f\xc6\x2b\x16\xc2\x79\xc5\xdf\x38\xc9\xef\x61\x9c\x6e\xeb\x78\xc2\xc3\x14\x0f\x5c\xed\xfa\xd3\x21\x8c\x27\x8f\x1b\x2c\x2c\xeb\x3c\x5e\x8e\xf1\xdd\x3a\x9e\xfd\x43\xb2\x4b\x92\x70\xbb\xf4\x46\x13\xf8\xab\xb7\xc3\x16\x37\xe6\xef\xff\x80\xdb\x17\xe6\x62\xcf\xde\xc8\xb1\x9d\xd9\xde\x57\xfd\x3c\x4f\xf3\xce\xfc\x9c\x6c\x8e\x4f\xf1\xc9\xbc\x7c\x65\x10\xd5\xfe\xbd\xff\x37\x8c\xf8\x79\x1b\xc3\xc6\xf3\x0f\xb7\x10\xfc\x1c\xcd\xee\x76\xc9\x66\x0c\xf1\xc0\x77\xaf\xcc\x65\x3c\xc1\xc4\x66\xf6\xeb\x6d\xbe\xe0\xf1\x85\x09\xe7\x75\xff\x16\xd6\xc3\xf6\x01\x86\xcc\xf7\xff\x7a\x69\xbe\xff\xf4\x20\x91\x44\x5f\xbb\x64\xf3\x39\x49\x36\x9f\xec\x6c\xdc\x2d\x18\xf1\x23\x4e\x92\xcd\x47\x09\xe7\x95\x19\xa7\xfd\xeb\xe9\xfa\xb8\xfd\x83\xbb\x85\x17\xe6\xf8\xb4\x4b\x36\xfd\xe9\xed\x3d\xd2\xfd\xeb\xd3\xb4\xf8\xed\x2e\xf9\x7f\xc5\x03\x33\x62\xff\x57\x0c\xf9\x79\x96\xb8\x75\xd1\xdd\xc2\xfe\x07\x84\xbe\xdd\xbd\xc0\x8e\xe4\x73\x92\xac\x8f\x57\x6f\xec\xb2\xf8\x15\x90\xdf\xfa\x15\x56\x62\x7e\x5a\x8f\x64\x33\x5e\xc2\x64\xcc\xb4\xec\xff\x34\x9e\xfc\xbb\x4b\x98\xbe\x9c\xd3\x12\xde\xd7\xbf\xb1\x10\x6b\x68\x8c\x96\x31\xd9\x2c\xe3\x53\x7c\x1e\x2f\x6b\x5d\x26\x9b\x33\x3a\xc0\x7c\x31\xfa\x97\x69\xf0\x71\xf1\xc3\x78\xf6\x06\x34\xd9\xe3\x0e\x7e\x22\x55\xb6\x61\xfc\x6f\x5f\x3b\xf3\xde\x9e\xfd\x76\xa7\x1e\xe0\x53\xb3\x0c\xe3\x1e\xde\x93\xcf\xbf\x71\xf6\x6f\xe3\x13\xce\xc6\x68\x9e\x1f\x45\xa0\xbf\x79\x14\xb1\x6e\x77\xdf\x46\xfe\xdc\x00\x52\xfb\x3d\x03\x48\x6e\xbb\xfb\x9a\xe8\x2f\x2c\x68\xf6\xbf\x6e\xe4\xdd\xf2\x66\x9c\xb7\x3b\xe3\xa6\xe9\xf4\xed\x69\x7b\x5a\x7e\x27\xf3\xc7\x45\x12\xf7\x73\xb0\xbd\xff\xf9\xf3\x37\xa7\x95\x12\x60\xf9\xc7\xe5\xd3\xf1\xcf\x51\x75\x3e\x5c\x4f\xe6\x95\x72\x61\xfb\x40\x9c\x05\xe2\xd6\x11\xa7\x2d\x71\x9a\xfe\xef\x2b\x60\x4f\x4f\x5c\xd5\xc4\xf5\x40\x5c\x07\xe2\xcc\x11\xbb\x8e\x38\xcb\x88\x83\x27\xce\x7b\xe2\x30\x10\xa7\x96\x78\xf0\x72\xd9\x86\x38\xcd\x89\x7d\x29\xef\xdb\x86\xb8\x2f\x88\xab\x86\xb8\x0b\xc4\xb6\x24\x2e\x0b\xe2\x3a\x27\x4e\x1b\xe2\xba\x23\x6e\x53\xe2\xd2\x11\xe7\x81\xb8\x6e\x89\x87\x9c\x38\x2b\x89\xfb\x8a\xd8\x67\xc4\x55\x4a\x9c\xb7\xc4\xd6\x11\xb7\x83\xd8\x2d\x4b\xe2\x2e\x23\x4e\x7b\x62\x3f\x10\x57\x96\xb8\xab\xc5\x46\xdf\x12\x37\x41\xee\xdb\x5a\x7c\xc2\x5f\xdf\x10\xbb\x41\xe2\x43\xdc\x75\x2a\x7b\xaa\x40\xec\x6b\x62\x5f\x11\x77\x9d\x5c\x75\x23\x67\x3b\x2b\x7b\x1b\xe4\x6a\x89\x5d\x4f\x9c\x55\x62\x0b\x18\x14\x29\x71\x8d\x77\x35\xb1\x73\xc4\x0d\xf2\x29\x88\x6d\x2a\x78\x0d\x19\xb1\x0f\xc4\x4e\xed\xd4\xb0\x01\x3c\x1c\x71\x1f\x88\x3b\xec\x71\xc4\x21\x23\xb6\x05\x71\x6b\x89\xfb\x41\xde\xa1\x46\xbe\x23\xf6\xbd\x60\x65\xe1\x17\xb8\xc0\x0f\xf0\x6e\xa4\x96\xc8\xdb\x17\x12\x4f\x83\x9c\x32\xe2\x0e\xb5\x18\x24\x2e\xec\x69\xac\xf8\x88\xfe\x9d\xe0\x90\xc1\x4f\x2d\xb9\xe5\xa5\xe4\x82\x5a\xa4\xc0\x71\x10\xfc\x63\x6c\x8d\xe2\x5a\x49\x4c\x43\x21\x31\xde\xf3\x47\xcc\x45\x23\x7b\x71\xb9\x4a\xfc\xe1\x3f\x2b\x88\x3b\xd8\x0c\xc4\x03\x38\xa4\x31\xe3\xbf\xcf\x05\xab\x01\xf1\xa3\x26\x9d\xd4\xb2\x56\x2c\xb3\x5c\x30\x87\xef\x32\x17\x0e\x44\x4e\xa0\xa6\x41\x30\x70\xf7\xda\x34\xb2\x56\xdc\x63\x2d\x05\x8b\xaa\x97\x98\xb1\x0e\x4e\x37\xad\xc4\x0d\x0c\xc1\xa7\x52\x6b\x64\x5b\x62\x57\x4b\x8d\xf2\x86\xb8\x1a\xe4\x19\xf1\x0c\x95\xc4\x83\xfd\xa8\x75\x9a\xc9\x15\xb1\xa9\x15\x27\xe4\x64\xc5\x56\xf4\x19\xa4\x26\xc0\xa9\x54\x1c\x63\x8f\x0c\x72\xf5\x99\xe2\xaf\xbd\xe4\xc0\x23\x2f\x5c\xcc\xbc\xd4\x34\x62\xda\x08\x47\xf0\x2e\xf6\x06\xb8\xe4\x85\xdf\x43\x47\xec\xd0\x6b\xe9\xf3\x18\x1b\x9c\x45\xbf\x78\xe9\xd5\x3a\x23\x2e\x2a\x79\x06\x9f\x11\x6f\x53\x4a\xed\x3b\xe5\x47\xac\x6d\x27\xfd\x35\xe0\x6c\x2f\x38\x23\xfe\x88\x27\x72\x75\x12\x6b\x48\x45\x0f\x80\x05\x70\x06\x47\x43\xa1\x7e\x51\xd7\x5e\xb0\xc6\x3b\xc4\x17\x31\x51\xde\x83\xc3\xb9\x25\x6e\x72\xe2\x06\x18\x5a\xc9\x0d\x67\xa1\x0f\xb0\x5f\xa2\xc7\x50\xbb\x82\xb8\xb4\xa2\x3f\xc8\x19\xff\xb0\x09\xcd\x00\x96\xbe\x15\x6c\xb0\x2f\x2f\x88\xbd\xd6\xb5\x69\x88\x0b\x2b\xb9\x37\x8a\x1f\xf0\x41\xed\x0b\xd5\x32\xe8\x41\xe1\xc5\x2e\xce\x21\x6e\xef\xe4\x42\x9f\xa0\xcf\x0b\xc5\x3d\x68\xcf\xf8\x86\xb8\x71\xa2\x89\x99\xe6\x04\x9c\x8b\x92\x38\xf4\xa2\x09\x55\x45\x5c\xb5\xda\x9f\xad\xf0\xc3\x5b\xd1\x40\x60\x01\x0c\x5d\x29\xbe\xd1\xd7\x88\x05\x31\x5a\xd5\x0e\x60\x14\xe3\xb8\x73\x18\xb9\xe4\xa2\xab\xd0\x04\xf0\x28\xea\x42\x26\x7d\x02\x0e\x84\x4a\xf0\x8f\x1a\x86\x35\xed\x37\x70\x19\xfb\x10\x07\xf2\xbb\xeb\x09\xb4\x13\xfa\x8c\x1a\xa0\xbe\x95\xf2\x1e\xf1\x83\x2b\xd0\x55\xd8\xcb\xe1\xab\x94\x5a\x20\xae\x5a\x71\x01\x07\x91\x17\x30\xc4\xb3\x0b\xaa\x53\x8d\xd8\x83\x3f\xd4\x12\xfc\x42\x0f\x41\x07\xa1\xa5\x88\xb7\xc8\x04\x03\xc4\xe5\x9a\xaf\x7d\x08\xbd\x45\xce\xd0\x2d\xc4\x02\x5e\xb6\xd5\x57\xff\xe0\x1c\xea\x00\x7e\x60\x5f\x33\x68\x4e\xaa\x0f\xf0\x9d\x16\xa2\x7d\xf0\x15\x6b\xa8\x73\x6c\x28\xa5\xaf\xda\x56\x75\xe8\xae\xb9\x3a\xaf\x30\xa3\xd0\xab\xad\xea\xb1\x57\xdd\x84\xe6\x64\xaa\xfb\xb1\xbf\x1a\xe5\x30\xf4\xe8\x3e\x1f\xf5\x42\x4c\xad\x62\x5e\x66\xa2\x49\x98\x23\x25\xe6\x64\x2d\xef\xac\xce\x2e\x70\x09\xe7\x8b\x20\x33\xc7\xea\x3c\xb4\xc0\x1e\xd8\x0d\xd2\x03\xe0\x66\xa9\x31\x76\xd0\x92\x4e\x7d\xdc\x75\x36\x13\x1b\xf0\x0f\x9e\xa6\xaa\x2f\xc0\x3c\xce\x0f\x2b\xe7\x22\x06\xb9\xe4\x86\xb9\x0a\x5d\xfe\x32\xf7\x52\xd1\x98\x38\xcb\x9d\x70\x09\xfc\x83\x2e\x07\xad\x19\xf2\x8e\xbc\x0d\x72\x16\xe7\xea\x4a\xf5\xa7\x20\x2e\x6a\xe1\x77\xd0\xda\x41\x8b\xa1\x27\xd0\x10\xf0\x01\xbc\x86\xbe\x77\xc0\xa4\x52\x0c\x6a\xa9\x05\x7a\x19\xeb\xc0\x06\x33\x61\xd0\x3c\x71\x16\xfc\xc3\x6c\x00\x8e\xe8\x5b\xe4\x0e\xbd\x84\x3f\x9b\x4b\x7f\xc2\x3e\xf8\x85\xfa\xc5\x39\x56\xe8\xac\x75\xf2\x8f\xfe\xec\x4a\xe9\x33\xbc\x83\xde\xb4\xaa\x05\x56\x67\x0e\xbe\x83\xa0\x25\x77\x9c\xc0\x17\xc4\xd6\xe9\x5c\xeb\x55\x13\xa0\x29\xe0\x69\xad\x5a\x8e\x9e\x8f\x5a\x59\x49\x6c\x95\x17\xec\xca\xfa\xb9\x7e\x62\x7f\x9e\x8b\x4d\xf4\x44\xa1\x7d\x08\xfd\xc7\xdc\x75\x3a\x7f\x07\xe5\x3a\x72\x2d\xb5\x9f\xf0\x2d\x06\xae\x63\x86\x82\x47\x98\x89\xf1\xdb\xa7\xd1\x6f\xa9\x41\xcf\xa4\x7a\x46\x71\xc0\xfc\x82\xa6\xf6\x56\x7a\x08\x6b\xe0\x19\xf0\x47\xcd\x30\x93\xd0\x2f\x88\x33\x7e\x53\x59\xd1\xa9\x38\xdf\x7a\xd5\xc9\x54\x66\x34\x62\xad\x4b\xc1\x26\xc7\x7d\xa1\x75\xe8\xa4\x46\x55\x26\xb6\x60\x13\x5c\xb5\xfa\xbd\x12\x31\xa9\x65\x2e\xe2\x19\xb9\x23\x86\x90\x0b\x57\x51\xf7\x54\x31\x8f\x5a\x9a\x4a\x1d\xf0\xfd\x11\xe3\x2b\x65\x76\x94\xaa\xf9\xd0\x5c\x68\x2d\xf6\x42\x67\xd1\x1b\xe0\x21\xf4\x2a\xe2\x59\xca\xf7\x0d\xea\x09\xfd\x80\x0e\x83\x4f\x58\xab\xf4\x7b\xb2\xcd\x64\xf6\xa5\x5a\xa3\xa8\xcf\x3a\xef\x31\x8f\xa0\xcb\xf7\xfe\x83\x8e\x00\x0b\xd4\x33\x7e\x07\x97\xc2\x97\xff\x04\x00\x00\xff\xff\xd9\xc2\xa2\x5d\x00\x10\x00\x00")

func svgGobindataGoBytes() ([]byte, error) {
	return bindataRead(
		_svgGobindataGo,
		"svg/gobindata.go",
	)
}

func svgGobindataGo() (*asset, error) {
	bytes, err := svgGobindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "svg/gobindata.go", size: 12288, mode: os.FileMode(420), modTime: time.Unix(1516871494, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _svgPaletteGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x91\x41\x6a\xf3\x30\x10\x85\xd7\x9e\x53\x0c\x82\x1f\x46\xfe\x8d\xd3\xba\x4d\x09\x85\x6c\xa2\x85\xb7\x25\x3e\x81\xab\xc8\xae\x68\xad\x18\x65\xd4\x52\x4a\xef\x91\xa3\xe4\x14\x3e\x53\x91\x9d\x84\x36\x8b\x52\x63\x06\xc1\xbc\xf7\xcd\x3c\xa9\xaf\xf5\x73\xdd\x1a\xdc\xbd\xb6\x00\xb6\xeb\xb7\x9e\x91\x20\x11\x4d\xc7\x02\x12\xd1\xd5\xfc\x24\x40\x02\xf0\x7b\x6f\x50\xe1\x8e\x7d\xd0\x8c\x1f\x90\xac\x33\x2c\x33\x5c\x61\xb0\x8e\x17\x90\x0c\x7b\x9c\xbe\xe6\x65\x5b\xf3\xdd\x2d\x7c\x02\x34\xc1\x69\x2c\x0d\xab\x82\x36\x01\xad\x63\x89\xa9\x8a\x5e\x6f\x38\x78\x37\xb6\xe8\xa8\xa7\x4d\x90\x98\x62\x9c\x97\x3f\x58\x9c\xe1\xf5\xe2\x4a\xfe\x80\xd0\x70\x38\xc1\x4f\x1c\x8d\xf7\x4b\x74\xe6\x8d\x94\x84\x44\xe7\xd5\xa4\x92\xe7\x01\xfa\x0c\x20\x8d\xa9\x92\x58\x5d\x72\x22\x24\x1f\xf6\xb8\xc4\xe1\x10\x8f\x6a\xdb\xf5\x81\x0d\xc9\x4b\xe7\xb9\x31\x59\xd6\xb8\x9c\x92\x53\x31\x9f\x9f\xf6\xae\xac\xa3\x48\x9b\x15\x72\xdc\xa7\xfc\x5d\xf4\xff\x18\x76\x76\x33\xc9\x57\x7f\x93\xa7\xc5\x68\xb8\x4c\xc6\xde\xba\x96\x64\x7c\x21\xeb\xda\x6f\xb7\xdc\x74\x9c\x57\xbd\xb7\x8e\x1b\x12\xbe\x7d\xa4\x7f\x9b\x6c\xfc\xa5\xc8\x50\xe7\xeb\x58\xca\x58\x56\x11\xfa\x15\x00\x00\xff\xff\xf7\x75\x2a\xc4\x10\x02\x00\x00")

func svgPaletteGoBytes() ([]byte, error) {
	return bindataRead(
		_svgPaletteGo,
		"svg/palette.go",
	)
}

func svgPaletteGo() (*asset, error) {
	bytes, err := svgPaletteGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "svg/palette.go", size: 528, mode: os.FileMode(420), modTime: time.Unix(1516871176, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _svgPalette_testGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xca\xb1\xaa\xc2\x30\x14\x06\xe0\x39\xff\x53\x1c\x32\x25\x97\x4b\x69\xb3\xb4\x15\x9c\x1c\xba\x3a\xf4\x05\x4a\x48\x4b\xd0\xc4\xd2\x1c\x5d\xc4\x77\x17\xa1\x2e\x89\xf3\xf7\xad\x93\xbd\x4c\x8b\xa3\xf4\x58\x00\x1f\xd6\xdb\xc6\xa4\x20\xe4\x1c\x58\x42\x48\x76\x89\x7d\x5c\x24\x34\x30\xdf\xa3\xa5\xd1\x25\x1e\x5c\x54\x4c\x7f\xbb\x55\xa3\xa6\x27\x84\xa5\xc3\x91\x06\xc7\x27\xa3\x6a\x0d\x31\x07\xae\xce\x9b\x8f\x7c\x8d\xaa\xfe\x27\xab\xf1\x29\xdf\xd1\xe7\xa5\x2f\x4f\x63\xf2\xd4\x98\x1f\xab\x2b\x56\x57\x2e\xd3\xe6\xcb\xb4\xfb\x7a\xe1\x1d\x00\x00\xff\xff\xd6\xdb\xee\x51\x03\x01\x00\x00")

func svgPalette_testGoBytes() ([]byte, error) {
	return bindataRead(
		_svgPalette_testGo,
		"svg/palette_test.go",
	)
}

func svgPalette_testGo() (*asset, error) {
	bytes, err := svgPalette_testGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "svg/palette_test.go", size: 259, mode: os.FileMode(420), modTime: time.Unix(1516871190, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"svg/github.tpl": svgGithubTpl,
	"svg/gobindata.go": svgGobindataGo,
	"svg/palette.go": svgPaletteGo,
	"svg/palette_test.go": svgPalette_testGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"svg": &bintree{nil, map[string]*bintree{
		"github.tpl": &bintree{svgGithubTpl, map[string]*bintree{}},
		"gobindata.go": &bintree{svgGobindataGo, map[string]*bintree{}},
		"palette.go": &bintree{svgPaletteGo, map[string]*bintree{}},
		"palette_test.go": &bintree{svgPalette_testGo, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

