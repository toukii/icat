// Code generated by go-bindata.
// sources:
// svg/github.tpl
// DO NOT EDIT!

package svg

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _svgGithubTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x56\x6d\x6f\x1b\x37\x12\xfe\x2c\xfd\x0a\x76\xfb\xe9\x00\x72\x96\xc3\xe1\xab\x23\xa9\x48\xec\x20\x17\xa0\xb9\x0b\x2e\xb9\x1c\x0e\x45\x71\x90\x57\x1b\x59\x88\x22\x09\xda\xb5\x2c\xb7\xb8\xff\x5e\x0c\x49\x25\x4e\x50\xa0\x1f\xec\xe5\xcb\xbc\x3c\x33\xf3\xcc\x50\xb3\x9f\xce\x9f\xb7\xe2\xd4\x1f\x87\xcd\x7e\x37\x6f\x10\x74\x23\xfa\x5d\xb7\x5f\x6d\x76\xeb\x79\x73\x3f\x7e\x54\xb1\xf9\x69\x31\x9d\xfd\xa0\x94\x78\xd5\xef\xfa\xe3\x72\xdc\x1f\xaf\xc4\xf3\xd5\xfe\xb6\x17\xaf\xb7\xdb\xfb\x61\xcc\x47\x02\x03\x68\xd0\x52\xbc\xfb\xf0\x4a\xbc\x3c\x1f\xf6\xc7\x51\xbc\xdd\xde\xaf\xd5\xeb\x9d\x80\x7c\xf8\xa1\xf8\xb8\x12\x1e\xb4\x16\x2f\xee\x37\xdb\x95\xd0\x7f\x13\x42\x29\x36\x7f\xf3\xcf\xeb\xf7\xff\x7d\xfb\x52\x0c\xa7\xb5\x78\xfb\xef\x17\x3f\xbf\xbe\x16\x8d\x6a\xdb\xff\xd0\x75\xdb\xde\xbc\xbf\xc9\x16\x10\xb0\x6d\x5f\xfe\xa3\x11\xcd\xdd\x38\x1e\xae\xda\xf6\xe1\xe1\x01\x1e\x08\xf6\xc7\x75\xfb\xea\xb8\x3c\xdc\x6d\xba\xa1\x7d\xf7\xe1\x55\xcb\x82\x37\xef\x6f\xda\xe1\xb4\x46\x84\xd5\xb8\x6a\x16\xd3\x19\x5b\x7e\x12\x27\x36\x62\xb3\x9a\x37\x3f\x2f\x1f\xfb\xe3\xff\xb0\x11\xe7\xcf\xdb\xdd\x30\xff\x13\xcb\x46\x6b\xcd\x96\xaa\xc8\xd5\x79\xbb\xd9\x7d\xfa\x33\x41\x4c\x29\xb5\xf9\xb6\x11\xe7\x79\xa3\x0f\xe7\x46\x3c\x96\xef\x74\x22\x1e\x36\xab\xf1\x6e\xde\xc4\x7c\x7c\xd7\x6f\xd6\x77\xe3\x65\x77\xda\xf4\x0f\x2f\xf6\xac\x22\xb4\x70\x68\xf8\x8f\xab\xb0\xbc\xdd\xf6\xea\x76\xd9\x7d\x5a\x1f\xf7\xf7\xbb\xd5\xbc\xd9\xf5\x0f\xe2\x1b\x99\xf3\xe7\xed\xd5\x70\x58\x76\xfd\xbc\x39\x1c\xfb\xa1\x3f\x9e\xfa\x66\x31\x9d\x88\x5c\xae\xd9\xaa\xff\x38\x2c\x72\x7e\x85\x10\x62\x36\x8c\x8f\xdb\x5e\x8c\x8f\x87\x7e\xde\x8c\xfd\x79\x6c\xbb\x61\x68\x16\xb3\x1f\x7e\xb9\xbe\x79\xfe\xfe\xf9\x2f\x59\x48\x08\x01\x6f\x1e\xff\xd5\x77\xa3\xf8\xfd\x72\x20\xc4\x30\x1e\xf7\x9f\xfa\x2b\x71\xbb\xbd\xef\x9f\x7d\x3d\xfe\xb8\xd9\x6e\xaf\xc4\xb1\x5f\x7d\x39\xfb\xff\x77\x46\xae\xee\xf6\xa7\xfe\x28\x7e\x9f\x4e\x26\x4f\xad\x2c\xbb\x4f\xcf\xf2\x51\xb1\x50\xcc\x4e\x26\x45\xfb\xd7\x5f\x17\xb3\x36\x63\x65\xdc\x25\x92\xf6\x6b\x28\xb3\xf5\x62\x3a\x99\x75\x9b\x63\xb7\xed\x45\x77\x9e\x37\xc6\xf9\x46\x74\x8f\x75\x71\xac\xdf\x6c\x60\xde\x5c\x7c\xee\xf6\xbb\xfe\x59\x75\xf7\xa3\xd6\xcb\xde\xc7\x67\x8d\x68\x17\xe2\xaf\x6c\xe9\xbf\xb0\x95\x9c\xd6\xe6\xf6\x8b\xad\xc3\x72\xbc\xcb\x57\xf3\xe6\xc7\x2e\x7d\xf4\x5a\x37\x62\x35\x6f\xde\x10\x79\x30\xde\x49\xef\x20\xe1\x35\xa1\x86\xe8\x49\x3a\x07\xe8\x83\x34\x91\x20\xba\x24\x6d\x82\x80\x49\x1a\xe7\xeb\xb2\x53\x26\xe4\x1b\xad\x9c\x2d\x1a\x60\x6d\x54\x51\x67\x63\xe8\x01\x13\x4e\x27\x93\x4e\x19\x0b\xce\x59\x89\x1a\x28\x3a\x65\x3d\x78\xb4\xd2\x38\x30\x1e\x95\x77\xe0\x7c\x90\xd6\x82\x41\x37\x28\x22\x88\x26\x4a\x8b\xa0\xd1\xaa\x72\x2a\x8b\x4c\xa7\x50\x43\xb0\xc4\x9a\x56\xa3\x2a\x0e\xa4\x33\x60\xb5\xbf\xec\x8a\xf3\xe9\x64\x32\x64\x30\xb2\x22\xcb\xb7\xe5\xd2\x76\x05\x87\xcc\xa8\x5c\xc1\x61\x64\x45\xf5\xd4\x63\xec\x30\x42\x62\xe0\xfc\xa1\x0a\x4a\x56\x88\xdf\x00\xe7\x30\x03\x68\x34\xd2\x40\xe2\xe0\x2d\xa0\x93\x0e\x1c\x9f\x20\x50\x42\x19\xc0\xfb\x74\x52\x14\xc0\x19\xec\xb4\xc2\x04\x4e\x5b\xe9\x19\x04\x87\x1d\xc8\x4a\x4c\xe0\xbd\x53\xd6\x80\x8f\xbe\x53\x11\x08\xad\xd2\x10\x52\x52\xe8\x20\xd9\xa0\x10\x12\x46\x65\x0c\x24\x6d\x14\x01\xb9\x90\x33\xec\x19\xa7\x42\xb0\x94\x14\x5a\x20\x9d\x14\x81\xc3\xc0\x92\xda\x93\xf2\x60\xc8\x75\x2a\x40\x70\x56\x19\x08\x18\x59\x2c\xe8\xa8\x5c\xd6\x34\xb9\xe4\x8a\xeb\x4a\x6c\x0d\x9d\x57\x04\xc1\x05\x85\x06\x74\x50\x11\x3c\x91\xc2\x00\xc1\x7a\xd6\xf4\x26\x65\xbf\x0e\x7c\xf0\x6c\x23\x79\xae\x8e\x25\xc3\x0a\x21\x83\x30\x3e\xb2\x5d\x8a\xb6\x53\x04\x91\x82\x0a\xe0\x92\x55\x1e\x62\x70\x5c\xaf\xa0\x83\x4a\x80\x68\x98\x48\x44\xb1\x53\x06\x0c\x45\x36\xe4\x09\x4b\x74\x1c\x00\x59\xaa\x1b\x72\x80\x44\xec\x59\x33\xa9\x42\x44\x19\x41\x07\xab\xac\x83\x18\x2d\x97\xd4\x18\x54\x9e\x80\x90\xa3\x25\x4e\x4a\x02\x6d\x9c\xaa\x79\x4e\x10\x63\x94\x06\x28\x45\xe5\x0d\xb8\x84\x9d\x06\x1b\x92\xd2\x80\x5e\x22\x98\xbc\x24\x26\x7a\x96\xc9\x97\xec\x10\x01\x4d\x11\x22\xf0\x14\x94\x06\x1d\x65\xc8\xbc\xd6\x60\x6c\x47\x90\xd0\xcb\xa2\x1a\x01\x99\x35\x80\x2e\x49\x4e\x07\x4a\x03\x0e\x63\xc7\x84\x63\x27\xe4\xa2\x2c\x41\xca\xa2\x86\x11\x8c\xf1\x4c\x91\x40\x85\x4a\x2e\x59\x99\x0b\x20\xd1\x81\x37\x51\x46\x70\x48\x1c\x20\x6a\x94\x25\xbb\x4c\xcf\xa0\x9d\x72\x60\x82\x97\x14\x81\x7c\x52\x01\x12\x5a\xe9\x22\xa4\x64\xcb\xa6\x33\x1a\xac\xb7\x52\x4b\xab\xc1\x68\x8e\xcc\x53\x94\x2e\x81\x21\x2b\xb3\x48\x0e\x90\xc0\x52\xa9\x07\xf7\x04\x67\xce\x81\xf7\x41\x92\x07\x22\x54\x85\x9b\x03\x43\xf5\x5c\xf2\xc0\xbd\x63\xc0\x1a\x53\x00\x6c\x33\x0b\xa4\xce\xa3\x81\x1b\xc6\xf0\xb5\xb3\x46\x26\x08\xdc\x3d\x04\x56\xbb\x92\x56\x59\x52\x9f\xdd\x7a\x40\x1b\x24\x06\xb0\xc6\xd7\x02\x72\x2c\x8e\x2e\x9b\x52\x4d\x2d\x2b\xb1\x80\xf1\x59\x70\xba\x32\x44\x16\x52\x54\xf2\xd4\xbc\xd6\x9c\x60\x82\x60\xdd\x25\xa8\x4c\xb2\x4c\xdb\x4c\x47\x59\xe8\x18\xc1\x25\xe2\x8c\x52\x8c\x95\xb6\xf2\x42\xdb\x4c\x6f\x59\xe9\x8d\x0c\x99\xed\xc7\x80\xb5\x15\x64\x69\x85\xda\x31\xb2\x76\x0c\x01\xa2\xf4\x90\x92\xab\x7d\x25\x73\x5f\x65\xcf\xb9\x03\x65\xed\x40\x07\xa8\xa3\xb4\x10\x92\xaf\x8d\x2a\x6b\xa3\xfa\x32\x77\x2e\xfd\xec\x22\x57\xcd\xb9\x4b\xe7\xcb\x1c\x39\x97\xcc\xf8\x24\x4b\x78\x98\x20\x71\x7e\x09\xc8\x7e\xd9\x95\x49\x72\x22\x0f\x51\x67\x00\x1e\xac\xe1\x21\x92\x42\xce\xa7\x73\xca\x02\x21\xe5\x11\x97\x28\xfb\xc5\xae\x4c\x46\x55\xe7\x64\x99\x8c\xaa\xce\xc9\x32\x19\xeb\x64\x2e\x03\x92\x54\x1d\x90\x65\x32\xaa\x3a\x27\x8b\x48\x1d\xf0\xb9\xd4\x3c\xbe\xb3\x21\x5b\x5f\x07\x55\x86\xf7\x65\x57\x86\xf7\xa0\xca\x3b\x52\x46\x77\x19\xec\xf5\xaa\xab\x98\xea\x8b\x52\x31\xd5\x17\x45\x7d\xef\xf0\x9a\xa2\x81\x18\x92\x4c\x08\x18\x8c\x24\xaf\x21\x1a\x19\x3c\x98\x14\xe4\x37\x8f\xde\x6f\x4d\xcb\x0f\x77\x7e\xce\xf3\x2b\xd9\x6d\x97\xc3\x30\x6f\xca\x0f\x85\xf2\x4a\x6a\xa9\x4f\x0e\xcd\x9d\x43\xf3\x41\xff\x5d\xff\x26\xde\xf0\x5b\xe8\x34\x82\xf3\xfe\x1a\x99\x33\x21\x5e\xf6\x32\x4f\x43\x2b\x29\x21\x78\x63\x2e\x5b\xe3\xfc\xbb\x8b\xe4\xd7\xa3\xba\x9c\x4e\x26\xef\xbe\xa8\x7f\x67\x8e\x15\x2f\xb6\x9e\x9c\x5d\xd6\x8c\xbf\xfc\x00\x69\xd7\xfc\x6f\x38\xad\x17\xd3\x3f\x02\x00\x00\xff\xff\xad\xb7\x2d\xe2\x3e\x0b\x00\x00")

func svgGithubTplBytes() ([]byte, error) {
	return bindataRead(
		_svgGithubTpl,
		"svg/github.tpl",
	)
}

func svgGithubTpl() (*asset, error) {
	bytes, err := svgGithubTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "svg/github.tpl", size: 2878, mode: os.FileMode(420), modTime: time.Unix(1516845557, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"svg/github.tpl": svgGithubTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"svg": &bintree{nil, map[string]*bintree{
		"github.tpl": &bintree{svgGithubTpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

