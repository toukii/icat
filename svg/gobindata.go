// Code generated by go-bindata.
// sources:
// svg/github.tpl
// svg/gobindata.go
// svg/palette.go
// svg/palette_test.go
// DO NOT EDIT!

package svg

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _svgGithubTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x55\x6d\x6f\x1b\xb9\x11\xfe\x2c\xfd\x0a\xde\xf6\x53\x01\x72\x96\xc3\xe1\xab\x2b\xe9\xe0\xd8\x41\x1a\xe0\xae\x17\x20\x69\x8a\xe2\x70\x28\x94\xd5\x46\x16\xa2\x48\x86\x76\x2d\xcb\x17\xe4\xbf\x17\x43\x52\x39\x3b\x08\xd0\xf4\x3e\x48\xcb\x97\x79\x79\x66\xe6\x99\xe1\xec\xc7\xd3\xc7\xad\x38\xf6\x87\x61\xb3\xdf\xcd\x1b\x04\xdd\x88\x7e\xd7\xed\x57\x9b\xdd\x7a\xde\xdc\x8d\xef\x55\x6c\x7e\x5c\x4c\x67\x3f\x28\x25\x5e\xf4\xbb\xfe\xb0\x1c\xf7\x87\x0b\x71\xb9\xda\xbf\xeb\xc5\xcb\xed\xf6\x6e\x18\xf3\x91\xc0\x00\x1a\xb4\x14\xaf\xdf\xbe\x10\xcf\x4f\xb7\xfb\xc3\x28\x5e\x6d\xef\xd6\xea\xe5\x4e\x40\x3e\x7c\x5b\x7c\x5c\x08\x0f\x5a\x8b\x67\x77\x9b\xed\x4a\xe8\xbf\x0a\xa1\x14\x9b\xbf\xfe\xe5\xea\xcd\xbf\x5f\x3d\x17\xc3\x71\x2d\x5e\xfd\xf3\xd9\x4f\x2f\xaf\x44\xa3\xda\xf6\x5f\x74\xd5\xb6\xd7\x6f\xae\xb3\x05\x04\x6c\xdb\xe7\xff\x68\x44\x73\x33\x8e\xb7\x17\x6d\x7b\x7f\x7f\x0f\xf7\x04\xfb\xc3\xba\x7d\x71\x58\xde\xde\x6c\xba\xa1\x7d\xfd\xf6\x45\xcb\x82\xd7\x6f\xae\xdb\xe1\xb8\x46\x84\xd5\xb8\x6a\x16\xd3\x19\x5b\x7e\x14\x27\x36\x62\xb3\x9a\x37\x3f\x2d\x1f\xfa\xc3\x7f\xb0\x11\xa7\x8f\xdb\xdd\x30\xff\x86\x65\xa3\xb5\x66\x4b\x55\xe4\xe2\xb4\xdd\xec\x3e\x7c\x4b\x10\x53\x4a\x6d\xbe\x6d\xc4\x69\xde\xe8\xdb\x53\x23\x1e\xca\x77\x3a\x11\xf7\x9b\xd5\x78\x33\x6f\x62\x3e\xbe\xe9\x37\xeb\x9b\xf1\xbc\x3b\x6e\xfa\xfb\x67\x7b\x56\x11\x5a\x38\x34\xfc\xe3\x2a\x2c\xdf\x6d\x7b\xf5\x6e\xd9\x7d\x58\x1f\xf6\x77\xbb\xd5\xbc\xd9\xf5\xf7\xe2\x89\xcc\xe9\xe3\xf6\x62\xb8\x5d\x76\xfd\xbc\xb9\x3d\xf4\x43\x7f\x38\xf6\xcd\x62\x3a\x11\xb3\x55\xff\x7e\x58\x4c\x85\x10\x62\x36\x8c\x0f\xdb\x5e\x8c\x0f\xb7\xfd\xbc\x19\xfb\xd3\xd8\x76\xc3\xd0\x2c\x66\x3f\xfc\x7a\x75\x7d\xf9\xe6\xf2\xd7\xe9\x64\xf2\x97\xfd\xdd\xd8\x1f\xae\x36\x87\x6e\xdb\x8b\x4f\xd3\xc9\x64\x32\x8c\x87\xfd\x87\xfe\x42\xbc\xdb\x2e\xbb\x0f\x7f\xe3\x93\xf7\x9b\xed\xf6\x42\x7c\xfa\x04\xbf\x64\xd9\xcf\x9f\xf9\xf4\xf3\x57\xca\x17\x37\xfb\x63\x7f\xf8\x9f\x26\xae\x96\xe3\x17\x03\x6c\xa1\x5b\x8e\x97\x87\x1c\xe2\xf7\xa8\x5e\x66\xc9\xc7\x08\xfe\xd0\xff\x4e\x00\x4f\x63\xa8\x26\xfe\x2f\xd8\x45\xe5\x4f\xb9\xe3\xa2\xfc\xf6\xdb\x62\xd6\xe6\xc2\x70\x91\x66\x6d\x29\xd7\x6c\xbd\x98\x4e\x27\xb9\xd5\x66\xb7\xcb\xf1\x26\x13\xb4\x5b\x8e\x8d\x58\xcd\x9b\x9f\xb5\xd4\x47\x87\xe6\xc6\xa1\x79\xab\xff\xae\x7f\x17\x3f\x1b\xe7\xa5\xd3\x08\xce\xfb\x2b\x34\x1a\x28\xc4\xf3\x5e\xa2\x06\x4b\x56\x52\x42\xf0\xc6\x9c\xb7\xc6\xf9\xd7\x67\xc9\x3f\x8e\xea\x72\x3a\x99\xbc\xfe\xa2\xfe\x95\x39\x56\x3c\xdb\x7a\x74\x76\x5e\xff\xde\xb4\x8b\xdc\xc8\x93\x59\x57\x68\xc4\xd0\x1f\x31\xa3\x11\xdd\x69\xde\x18\xe7\x1b\xd1\x3d\xd4\xc5\xa1\x7e\xdb\x85\x78\xaa\x97\x43\xfe\xb6\xbc\xfe\x22\xff\x38\x41\xb5\xfa\x25\x4f\x44\x1e\x8c\x77\xd2\x3b\x48\x78\x45\xa8\x21\x7a\x92\xce\x01\xfa\x20\x4d\x24\x88\x2e\x49\x9b\x20\x60\xca\x21\x94\x65\xa7\x4c\xc8\x37\x5a\x39\x5b\x34\xc0\xda\xa8\xa2\xce\xc6\xd0\x03\x26\x9c\x4e\x26\x9d\x32\x16\x9c\xb3\x9c\x33\x8a\x4e\x59\x0f\x1e\x39\x8b\x60\x3c\x2a\xef\xc0\xf9\x20\xad\x05\x83\x6e\x50\x44\x10\x4d\x94\x16\x41\xa3\x55\xe5\x54\x16\x99\x4e\xa1\x86\x60\x89\x35\xad\x46\x55\x1c\x48\x67\xc0\x6a\x7f\xde\x15\xe7\xd3\xc9\x64\xc8\x60\x64\x45\x96\x6f\xcb\xa5\xed\x0a\x0e\x99\x51\xb9\x82\xc3\xc8\x8a\xea\xb1\xc7\xd8\x61\x84\xc4\xc0\xf9\x43\x15\x94\xac\x10\x9f\x00\xe7\x30\x03\x68\x34\xd2\x40\xe2\xe0\x2d\xa0\x93\x0e\x1c\x9f\x20\x50\x42\x19\xc0\xfb\x74\x54\x14\xc0\x19\xec\xb4\xc2\x04\x4e\x5b\xe9\x19\x04\x87\x1d\xc8\x4a\x4c\xe0\xbd\x53\xd6\x80\x8f\xbe\x53\x11\x08\xad\xd2\x10\x52\x52\xe8\x20\xd9\xa0\x10\x12\x46\x65\x0c\x24\x6d\x14\x01\xb9\x90\x33\xec\x19\xa7\x42\xb0\x94\x14\x5a\x20\x9d\x14\x81\xc3\xc0\x92\xda\x93\xf2\x60\xc8\x75\x2a\x40\x70\x56\x19\x08\x18\x59\x2c\xe8\xa8\x5c\xd6\x34\xb9\xe4\x8a\xeb\x4a\x6c\x0d\x9d\x57\x04\xc1\x05\x85\x06\x74\x50\x11\x3c\x91\xc2\x00\xc1\x7a\xd6\xf4\x26\x65\xbf\x0e\x7c\xf0\x6c\x23\x79\x95\x5b\xc2\xb0\x42\xc8\x20\x8c\x8f\x6c\x97\xa2\xed\x14\x41\xa4\xa0\x02\xb8\x64\x95\x87\x18\x1c\xd7\x2b\xe8\xa0\x12\x20\x1a\x26\x12\x51\xec\x94\x01\x43\x91\x0d\x79\xc2\x12\x1d\x07\x40\x96\xea\x86\x1c\x20\x11\x7b\xd6\x4c\xaa\x10\x51\x46\xd0\xc1\x2a\xeb\x20\x46\xcb\x25\x35\x06\x95\x27\x20\xe4\x68\x89\x93\x92\x40\x1b\xa7\x6a\x9e\x13\xc4\x18\xa5\x01\x4a\x51\x79\x03\x2e\x61\xa7\xc1\x86\xa4\x34\xa0\x97\x08\x26\x2f\x89\x89\x9e\x65\xf2\x25\x3b\x44\x40\x53\x84\x08\x3c\x05\xa5\x41\x47\x19\x32\xaf\x35\x18\xdb\x11\x24\xf4\xb2\xa8\x46\x40\x66\x0d\xa0\x4b\x92\xd3\x81\xd2\x80\xc3\xd8\x31\xe1\xd8\x09\xb9\x3c\x4b\x3c\xa1\x2c\x6a\x18\xc1\x18\xcf\x14\x09\x54\xa8\xe4\x92\x95\xb9\x00\x12\x1d\x78\x13\x65\x04\x87\xc4\x01\xa2\x46\x59\xb2\xcb\xf4\x0c\xda\x29\x07\x26\x78\x49\x11\xc8\x27\x15\x20\xa1\x95\x2e\x42\x4a\xb6\x6c\x3a\xa3\xc1\x7a\x2b\xb5\xb4\x1a\x8c\xe6\xc8\x3c\x45\xe9\x12\x18\xb2\x32\x8b\xe4\x00\x09\x2c\x95\x7a\x70\x4f\x70\xe6\x1c\x78\x1f\x24\x79\x20\x42\x55\xb8\x39\x30\x54\xcf\x25\x0f\xdc\x3b\x06\xac\x31\x05\xc0\x36\xb3\x40\xea\x3c\x1a\xb8\x61\x0c\x5f\x3b\x6b\x64\x82\xc0\xdd\x43\x60\xb5\x2b\x69\x95\x25\xf5\xd9\xad\x07\xb4\x41\x62\x00\x6b\x7c\x2d\x20\xc7\xe2\xe8\xbc\x29\xd5\xd4\xb2\x12\x0b\x18\x9f\x05\xa7\x2b\x43\x64\x21\x45\x25\x4f\xcd\x6b\xcd\x09\x26\x08\xd6\x9d\x83\xca\x24\xcb\xb4\xcd\x74\x94\x85\x8e\x11\x5c\x22\xce\x28\xc5\x58\x69\x2b\xcf\xb4\xcd\xf4\x96\x95\xde\xc8\x90\xd9\x7e\x0c\x58\x5b\x41\x96\x56\xa8\x1d\x23\x6b\xc7\x10\x20\x4a\x0f\x29\xb9\xda\x57\x32\xf7\x55\xf6\x9c\x3b\x50\xd6\x0e\x74\x80\x3a\x4a\x0b\x21\xf9\xda\xa8\xb2\x36\xaa\x2f\x73\xe7\xdc\xcf\x2e\x72\xd5\x9c\x3b\x77\xbe\xcc\x91\x73\xc9\x8c\x4f\xb2\x84\x87\x09\x12\xe7\x97\x80\xec\x97\x5d\x99\x24\x47\xf2\x10\x75\x06\xe0\xc1\x1a\x1e\x22\x29\xe4\x7c\x3a\xa7\x2c\x10\x52\x1e\x71\x89\xb2\x5f\xec\xca\x64\x54\x75\x4e\x96\xc9\xa8\xea\x9c\x2c\x93\xb1\x4e\xe6\x32\x20\x49\xd5\x01\x59\x26\xa3\xaa\x73\xb2\x88\xd4\x01\x9f\x4b\xcd\xe3\x3b\x1b\xb2\xf5\x75\x50\x65\x78\x9f\x77\x65\x78\x0f\xaa\xbc\x23\x65\x74\x97\xc1\x5e\xaf\xba\x8a\xa9\xbe\x28\x15\x53\x7d\x51\xd4\xd7\x0e\xaf\x28\x1a\x88\x21\xc9\x84\x80\xc1\x48\xf2\x1a\xa2\x91\xc1\x83\x49\x41\x3e\x79\xf4\xf8\x35\x9e\xce\xda\x35\xff\x0d\xc7\xf5\x62\xfa\xdf\x00\x00\x00\xff\xff\x29\x2a\xc7\x8f\xe5\x0b\x00\x00")

func svgGithubTplBytes() ([]byte, error) {
	return bindataRead(
		_svgGithubTpl,
		"svg/github.tpl",
	)
}

func svgGithubTpl() (*asset, error) {
	bytes, err := svgGithubTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "svg/github.tpl", size: 3045, mode: os.FileMode(420), modTime: time.Unix(1516887650, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _svgGobindataGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x56\xcb\xae\x1b\xc7\x11\x5d\x73\xbe\x62\x7c\x01\x07\x24\xa0\xf0\xce\xfb\x21\x40\x1b\x4b\x4a\xa0\x45\x64\x20\xd1\x2e\x15\x08\xfd\xa4\x07\x21\x39\x0c\x39\x54\x4a\xd7\xd0\xbf\x07\xa7\xab\x46\x8f\x38\xb6\x37\x59\xdc\x4b\xce\xb0\xbb\x1e\xe7\x9c\x3a\xdd\x8f\x8f\xf9\xcb\xd9\x87\xfc\x10\xce\xe1\x6a\x96\xe0\x73\xfb\x31\x3f\xcc\x7f\xb4\xd3\xd9\x9b\xc5\xec\xb3\xc7\xc7\xfc\x36\xdf\xaf\x2e\xdc\x9e\xa7\xef\x1f\x0e\x8f\x87\x69\xf9\xe9\x6e\xf7\xcb\xe5\xf8\xf9\xcd\xbc\xae\x3f\xcc\xeb\xbb\x8b\x39\x86\x65\x09\xbf\x7c\xf3\x7e\x09\xb7\x45\x5f\xbf\xfa\x31\x7f\xfb\xe3\xbb\xfc\xf5\xab\x37\xef\xbe\xcb\xb2\x8b\x71\xff\x34\x87\x80\xc5\x59\x36\x9d\x2e\xf3\x75\xc9\xb7\xd9\xe6\xc1\x7e\x5c\xc2\xed\x21\xdb\x3c\xb8\xf9\x74\xb9\x86\xdb\xed\xf1\xf0\x34\x5d\xf0\x22\x9e\x16\x7c\x4c\xb3\xfc\x7f\x9c\xe6\xfb\x32\x1d\xf1\x30\xa7\x0d\x17\xb3\xfc\xf4\x18\xa7\x63\xc0\x17\xbc\xb8\x2d\xd7\xe9\x7c\x48\xbf\x2d\xd3\x29\x3c\x64\xbb\x2c\x8b\xf7\xb3\xcb\xb5\x81\xbf\x06\xe3\xb7\xf8\x92\xff\xfd\x1f\x48\xfb\x2c\x3f\x9b\x53\xc8\x65\xdb\x2e\xdf\xae\x6f\xc3\xf5\x3a\x5f\x77\xf9\xcf\xd9\xe6\xf0\x94\x9e\xf2\xe7\x2f\x72\x54\xb5\x7f\x1b\xfe\x8d\x20\xe1\xba\x4d\x65\xe3\xf9\x87\x7b\x8c\xe1\x9a\xc2\xee\x76\xd9\x66\x8a\x69\xc3\x77\x2f\xf2\xf3\x74\x44\x88\xcd\x35\x2c\xf7\xeb\x19\x8f\xcf\xf2\x78\x5a\xf6\xaf\x11\x3d\x6e\x1f\x10\x28\xff\xfe\x5f\xcf\xf3\xef\x3f\x3c\x48\x25\x29\xd7\x2e\xdb\x7c\xca\xb2\xcd\x07\x73\xcd\xed\x3d\xe6\x92\x47\x92\x64\x9b\xf7\x52\xce\x8b\x7c\x9a\xf7\x2f\xe7\xcb\xc7\xed\x1f\xec\x3d\x3e\xcb\x0f\x4f\xbb\x6c\xe3\x8e\xaf\xd7\x4a\xf7\x2f\x8f\xf3\x2d\x6c\x77\xd9\xff\xab\x1e\x84\x91\xf8\xbf\x12\x28\x5c\xaf\x52\xb7\xbe\xb4\xf7\xb8\xff\x01\xa5\x6f\x77\xcf\xb0\x22\xfb\x94\x65\xcb\xc7\x4b\xc8\xcd\xed\x16\x16\x40\x7e\x77\x0b\xa2\xa4\xfe\x94\x8f\x6c\x33\x9d\xe3\x9c\xe7\xf3\x6d\xff\xa7\xe9\x18\xde\x9c\xe3\xfc\x79\x9f\x52\xb8\xbe\xff\x2a\x42\xe2\x30\xcf\x95\xc6\x6c\x73\x9b\x9e\xd2\xf3\x74\x5e\xba\x26\xdb\x9c\x30\x01\xf9\xe7\xa0\x7f\x99\x7d\x48\x2f\xdf\x4d\xa7\x90\x43\x26\x7b\x7c\x43\x9e\x24\x95\x6d\x9c\xfe\x3b\xd7\x2e\x7f\x6b\x4e\x61\xbb\xd3\x0c\xc8\xa9\x5d\xc6\x69\x8f\xec\xd9\xa7\xdf\xd8\xfb\xb7\xe9\x09\x7b\x53\x35\xdf\x6e\x45\xa1\xbf\xb9\x15\xb5\x6e\x77\x5f\x57\xfe\x6d\x00\xb4\xf6\x7b\x01\xd0\xdc\x76\xf7\xa5\xd1\x5f\x44\xd0\xee\x7f\x3d\xc8\x9b\xdb\xab\xe9\xba\xdd\xe5\x76\x9e\x8f\x5f\xef\x36\xc7\xdb\xef\x74\xfe\xf1\x26\x8d\x87\x6b\x34\x2e\xfc\xfc\xe9\xab\xdd\x2a\x09\xa8\xfc\xfd\xed\xc3\xe1\xcf\xc9\x75\xde\x5d\x8e\xf9\x0b\xd5\xc2\xf6\x81\xb8\x8c\xc4\x83\x25\x2e\x06\xe2\xa2\xf8\xdf\x7f\x31\x12\x8f\x8e\xb8\x6d\x89\x3b\x4f\xdc\x45\xe2\xd2\x12\xdb\x91\xb8\x2c\x89\x63\x20\xae\x1c\x71\xf4\xc4\x85\x21\xf6\x81\x38\x76\xc4\x6d\x4d\x5c\x94\xc4\x7d\x45\x3c\x76\xc4\xae\x26\x0e\x25\xb1\xb1\xc4\x95\x25\x0e\x23\x71\x28\x88\xfd\x40\xdc\x94\xc4\xa5\x91\x67\x13\x88\xcb\x9e\xb8\x2a\x88\xbb\x91\x78\xc0\xfb\x8a\xb8\x2f\x88\xab\x81\x78\x6c\x88\x7d\x4b\xdc\x74\xc4\x65\x47\x6c\x2a\xe2\x66\x20\x1e\x3a\xe2\xbe\x23\xae\x3c\xb1\xb3\x12\x23\x34\xc4\x36\xca\xf7\xa6\x26\x6e\x2b\xe2\x7a\x24\xae\xb5\x67\x8f\xfe\x1a\xe2\x3a\x48\x0c\xec\x1b\x7b\xe2\x7e\x94\xbf\xae\x23\x0e\x1d\xf1\x38\x4a\xed\xc1\x11\xbb\x9e\xd8\xd7\xf2\x69\x3c\x71\x3d\x48\xbf\x43\x4f\xdc\x95\xc4\xb6\x26\xf6\x91\xd8\x79\xc1\xa9\x40\xbd\x9e\x78\x18\x88\xfb\x40\xec\x51\x97\x27\x6e\x7b\xe2\xd1\xca\x6f\xbd\xe2\xe6\x1d\xf1\xe0\x89\x43\x54\xbc\x9d\xec\x69\x1d\x71\xe3\x88\xbb\x9e\xb8\x8e\x82\x43\xd5\x12\xb7\x41\xea\xb7\x56\x78\xb0\x05\x71\x09\x2e\x7a\xa9\xa7\xb0\xc4\x7d\x29\x5c\x79\x23\x58\x04\x4b\xec\x5a\xe9\x15\x75\xa0\xf6\x0e\x98\xa3\x8f\x9a\x78\x2c\x89\x9d\x72\x0f\x4e\x6c\x43\x5c\x36\xc4\x26\x4a\x5f\x16\x6b\x0b\x62\x17\x89\x1b\x3c\xf7\xc4\xd1\x0a\xbf\xa8\x0b\x35\x75\xda\x83\x07\x7e\xe0\x0f\x7c\x01\xe3\x42\xb0\xee\xa1\x27\xab\x9f\x4e\xf5\x87\x9e\x8d\xe8\x11\x7d\xf6\x8a\x0f\x6a\x6c\x10\x63\x90\xfa\xa1\x31\x53\x4a\x4d\xf8\x1d\xef\xd0\x3b\x72\x20\x17\x70\xc7\xbb\x36\x12\xd7\x5e\xb8\x47\x6d\xc0\x01\xda\x48\x98\x79\xe9\xd5\x8f\xd2\x43\x15\xa5\xbf\x06\x7d\xd6\x82\x55\xd2\x70\x24\xee\x55\x6f\xb6\x13\xee\xa0\x7f\x68\x14\x3c\x17\xad\xf0\x0b\x9e\x3c\x6a\xed\x65\x5e\xba\x41\x62\xf5\x35\x71\x5d\x13\x0f\x41\x70\x42\x2d\xc0\xa6\x47\xef\x51\xfe\xd0\x37\xf8\x42\x9c\x15\x47\x6b\x88\x7b\x2f\x35\xb7\x83\x6a\x23\x48\x1e\xab\xfd\xe3\xf7\xa8\xfc\x35\xca\xe7\x50\x7d\x5b\x63\xaa\x09\xfc\x0f\x32\x2f\xc3\xda\xcb\x40\xdc\x19\x99\x1f\x68\xb9\x1c\x95\x8f\x20\xb8\x56\xd0\x19\x74\x51\x49\x9f\xa3\x21\xae\x57\xed\x79\xf1\x8d\x68\x14\xd7\xa8\xba\xc3\x6c\x43\x77\x51\xf2\x42\xd7\xb5\xfa\x07\x66\xb3\x6b\x05\x5b\xdb\xca\x5c\x35\x56\x34\x8e\x19\xc5\x7c\x5b\x9d\x13\xcc\xd8\xaa\x11\xac\x81\xd6\xe0\x25\xd0\x00\xb0\xb3\xaa\x2f\xd7\x88\x3f\x00\x17\x68\x03\x39\xb1\xae\x42\x3f\x81\xd8\x19\xd1\x50\x6d\xd4\xa7\xd6\x79\x6b\x89\xfb\x41\x78\x01\x4e\xe8\x11\xf9\x10\x17\x9e\x84\x3e\x31\x23\x58\x1b\x81\x9d\x13\xbf\xc0\x8c\xa0\xe7\xb8\xea\x13\xf9\x3a\x89\x0d\xdd\xc2\x07\x6a\x70\xe8\x88\x03\xea\x30\xe2\x8b\x98\x99\x95\xf3\xd8\x4a\x1c\xe8\x0e\xfc\x81\xdb\x84\x65\x27\xb5\x5a\xad\x0f\x39\xb1\x06\xeb\x51\x37\xf0\x19\x46\x62\xe7\xd4\x37\x6b\x9d\xdb\x4a\xb8\x6c\xbd\x78\x1f\xf4\x80\xbd\x98\x77\x68\x1f\xde\xd0\x28\x47\xab\x4f\x61\x3e\x52\xcf\x8a\x0b\xf8\x05\x0f\xe0\x29\x79\xcd\x20\x5e\x33\xb4\x82\x7d\x5a\x0b\xed\x38\xd1\x6a\xc2\x39\x7c\x79\x4e\xf3\xaf\x79\xa1\x23\xe0\x03\x4d\xc1\xd7\x7b\xf5\x7d\xf8\x2c\xb0\x00\xef\xd0\x10\x30\x82\xe7\xf5\xad\xea\x78\x14\x9f\x8d\xaa\x5f\xf4\xd8\x35\xf2\x3c\x6a\x7c\x68\xc3\x2b\x5e\xd0\x76\xbd\x7a\xae\xea\x1c\xbe\x81\x59\x4e\xde\xac\xfb\xeb\x4a\xea\x1c\x34\x46\xfa\x84\x0f\x55\x8a\x31\xce\xa2\x20\xb8\x17\x3a\x8f\xc0\x76\xac\xbf\xe8\x65\xf5\x48\xec\x81\x26\xa1\x81\x42\xcf\x15\xe4\x00\x4f\xf0\xc2\x31\x4a\x1f\xc0\x1c\xde\x02\x7f\x87\x06\x31\xf3\xb5\x7a\x64\xa7\x5c\xc4\x41\xd6\x57\x9d\xf4\x82\xf3\x11\x79\xb1\xb6\xa8\x65\xce\x31\xe3\x98\x49\x78\xc7\xa8\x7e\x0e\x6f\x87\x16\x50\x9b\x59\xbd\xb6\x93\x7e\x71\x1e\xc1\x47\xd1\x9f\xd7\xb9\x83\xe7\xc2\xc7\x81\x0b\x72\x63\x0f\x72\xa6\x33\x3b\xea\xd9\xdb\xaa\x3f\x47\xd1\x0d\xea\xc0\x99\x0a\x8e\xd0\x37\x30\x82\x06\xbc\x9e\x85\x4e\xcf\x62\x9c\x13\xc8\x0d\x6d\x57\xa3\xfa\x0e\xb4\xe7\x89\xc7\x41\x72\xc3\x47\xd2\xd9\xa3\x33\x0f\xad\x38\x9d\x2b\xd4\x51\xd6\x32\xf7\x6b\x9f\x83\xce\x04\x34\x0a\xec\x81\x11\xfc\xc2\x43\xc7\x8a\x41\xaa\xa1\x53\x0f\x1c\xe5\x3e\x11\x55\x13\xbd\x9e\xf5\xb5\xde\x51\xe0\xc7\xa6\x15\x4d\x00\x1b\x17\x84\x07\xdc\x3f\x30\xab\x38\xdf\x70\x66\xb9\x95\xb3\x20\xbd\x17\xab\x3f\x75\x72\x67\x00\xf7\xb1\x90\xbc\xb8\x0b\xa5\x3e\x3a\xe1\x3b\xf5\xdd\x0b\x07\xc8\x8b\x3e\x70\x0e\xf5\x3a\x63\xb8\x3b\x40\x6b\x51\x63\xe3\x73\x6c\xe5\x1e\x82\xf8\xb5\xea\x30\xcd\x43\x23\x33\x93\xce\xa8\x28\xde\x06\x7c\xa0\x6d\xdc\x0d\xdc\x20\xda\x6c\x47\xd1\x57\xa7\xb5\x83\x6f\xcc\x45\x5d\x8a\xc7\x62\xae\x31\x2f\xab\x3f\xe2\x6c\x07\x16\xc0\xc4\x97\xe2\x0d\xc0\x14\xf7\x80\x84\xe3\x3a\x43\xea\x8d\xc6\x88\xe6\xe0\x1d\xe9\x5e\xd1\x7d\xe9\xa1\xaa\xa4\xb6\x5a\xef\x6d\xe0\x07\x33\x51\xa9\x86\x70\xee\x95\xea\x0f\xf0\x34\x5f\x89\x7f\xe2\x7e\xd5\xab\xde\x92\x0e\x4b\xe9\x79\xac\x84\x17\xdc\x15\x53\x1c\xe8\x15\x9a\x6a\xe4\xce\x84\xf9\x6c\x46\xd1\x43\xba\x13\x16\x32\x57\xd8\x8f\xbb\x60\x3a\x57\x7a\xf1\x2c\xe0\x83\x59\x4b\x7e\xac\x67\x1a\x78\xc6\x7d\x06\x67\x3a\xf2\x1a\xcd\x07\xfe\x80\x1b\xe6\xad\x52\x5e\x93\x66\xf1\xdd\x8b\x77\x94\x2b\xdf\xb5\x7c\xa6\xb3\xdc\xc8\x3a\x70\xf0\x9f\x00\x00\x00\xff\xff\x78\xef\xfb\x71\x00\x10\x00\x00")

func svgGobindataGoBytes() ([]byte, error) {
	return bindataRead(
		_svgGobindataGo,
		"svg/gobindata.go",
	)
}

func svgGobindataGo() (*asset, error) {
	bytes, err := svgGobindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "svg/gobindata.go", size: 12288, mode: os.FileMode(420), modTime: time.Unix(1516887652, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _svgPaletteGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x91\xc1\x4e\x83\x40\x10\x86\xcf\xcc\x53\x4c\x48\x4c\x76\x91\x50\x45\x6b\x1a\x93\x1e\x84\x03\x57\x53\xbc\x19\x0f\x74\x0b\x74\xa3\x6c\xc9\x76\x56\x63\x9a\xbe\x47\x1f\xa5\x4f\xc1\x33\x99\x85\xd2\x6a\x7b\xb0\x25\x64\x43\xd8\xff\xfb\x66\x67\xa7\xce\xc4\x7b\x56\xe6\xb8\xfc\x2c\x01\x64\x55\x2f\x34\x21\x03\xc7\x2d\x2a\x72\xc1\x71\xab\x8c\xe6\x2e\x70\x00\xfa\xae\x73\x8c\x71\x49\xda\x08\xc2\x15\x38\x13\x1f\x13\x1f\x23\x34\x52\xd1\x08\x9c\x66\x83\xdd\x53\x7c\x2c\x32\x7a\xb8\x87\x35\x40\x61\x94\xc0\x24\xa7\x38\x64\x33\x83\x52\x11\x47\x2f\xb6\xac\xce\xc9\x68\xd5\x6e\xb1\x5d\x9e\xcd\x0c\x47\x0f\x6d\xbd\xe0\x59\xe2\x00\x6f\x47\x37\xfc\x8f\x84\x35\xdb\x5e\xde\x7b\x04\x3e\x8e\x51\xe5\x5f\x2c\xe6\xe0\x88\x20\xed\x52\x7c\x5f\x40\xec\x05\x4c\xa0\x17\x73\x4c\x8f\x3d\x56\x12\x34\x1b\x1c\x63\xb3\xb5\x9f\xf1\xa2\xaa\x0d\xe5\x8c\x1f\x93\xfb\x8d\x0e\x99\xe0\xb8\xeb\x9c\xb5\x27\x7e\x9a\x2e\x59\x38\x1c\xf6\x0d\xa4\x52\x31\xab\x1d\x84\x9c\xb7\x27\x4b\xce\x8c\x5f\xef\xfa\x1f\xdc\xed\xc0\xe8\x42\xd0\x0b\x3b\xf4\xb8\x6f\xd2\x52\x95\x8c\xdb\xf9\x49\x55\xfe\x9a\x41\x51\x51\x90\xd6\x5a\x2a\x2a\x98\xab\xcb\x29\xbb\x9a\xf9\xed\xcb\x5d\x1f\x45\x30\xb1\x4b\x62\x97\xe8\x44\xfa\x32\xd7\xb9\xbd\x90\xd7\xb7\x13\x6b\xff\x6b\x05\x8e\x73\x41\x05\xff\xff\x78\x74\x60\xce\x89\x27\x07\xc6\xc6\xd7\xb0\x86\x9f\x00\x00\x00\xff\xff\x34\x1f\x12\x39\xf2\x02\x00\x00")

func svgPaletteGoBytes() ([]byte, error) {
	return bindataRead(
		_svgPaletteGo,
		"svg/palette.go",
	)
}

func svgPaletteGo() (*asset, error) {
	bytes, err := svgPaletteGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "svg/palette.go", size: 754, mode: os.FileMode(420), modTime: time.Unix(1516887333, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _svgPalette_testGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\xce\xb1\xaa\xc2\x30\x14\x80\xe1\x39\xe7\x29\x0e\x99\x92\xcb\xa5\xb4\xa1\x43\x2b\x38\x39\x74\x15\xec\x0b\x94\x90\x86\xa0\x39\x96\xe4\xe8\x22\xbe\xbb\x08\xba\x44\xc8\xfc\x7f\xc3\xbf\x2d\xf6\xbc\x78\x87\xf9\xee\x01\x42\xdc\xae\x89\x51\x81\x90\x6b\x64\x09\x42\xb2\xcb\x1c\xc8\x4b\xd0\x00\xeb\x8d\x2c\xce\x2e\xf3\xe4\x48\x31\xfe\x7d\x5a\x33\x6b\x7c\x80\xb0\xb8\xdb\xe3\xe4\xf8\x60\x54\xab\x41\xac\x91\x9b\x63\x0a\xc4\x17\x52\xed\x3f\xda\xe6\xc4\x29\x90\x57\x5a\xc3\xdb\x7e\x69\x67\x4a\xdc\x99\x0a\x37\x7d\xc9\x4d\x5f\xe1\x63\xa9\xc7\xda\xca\xf0\xb3\x32\x94\xfc\x09\xaf\x00\x00\x00\xff\xff\x37\x74\xd8\x96\x30\x01\x00\x00")

func svgPalette_testGoBytes() ([]byte, error) {
	return bindataRead(
		_svgPalette_testGo,
		"svg/palette_test.go",
	)
}

func svgPalette_testGo() (*asset, error) {
	bytes, err := svgPalette_testGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "svg/palette_test.go", size: 304, mode: os.FileMode(420), modTime: time.Unix(1516887342, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"svg/github.tpl": svgGithubTpl,
	"svg/gobindata.go": svgGobindataGo,
	"svg/palette.go": svgPaletteGo,
	"svg/palette_test.go": svgPalette_testGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"svg": &bintree{nil, map[string]*bintree{
		"github.tpl": &bintree{svgGithubTpl, map[string]*bintree{}},
		"gobindata.go": &bintree{svgGobindataGo, map[string]*bintree{}},
		"palette.go": &bintree{svgPaletteGo, map[string]*bintree{}},
		"palette_test.go": &bintree{svgPalette_testGo, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

